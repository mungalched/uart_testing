DIGITAL-8/10
VERLOG -9/10
SV- 8/10
UVM -9/10.
c= 0;
a =1;
b =2;
c = A+b;  // c=3;
c <=a+b ; // c=3;
d <=c+b; // d =2;

#2 a = 2;  
 a = #2 2;

wire out;

assign out = a+b;
a = z0x1;
b = z0x1;
 a === b
 a == b
== & ===

	out = a>B ? 1'b0:1'b1;

fork...join && fork...join_any && fork...join_none.
begin...end
intial begin
#10 z=5;   // 10 z=5;
fork
 begin
 #10 a=1; // 20 //20 //20  //20
 end
begin
 #20 b=2; // 30 //30 //30 // 40
end
 #50 c=3; // 60 // 60 //60 // 60

join // join_any // join_none

#70 d =4; //130  // 90 // 80.


always @ (posedge clk)
begin
  if(rst)
    out <=1'b0;
  else
    out <= in; 
end
class ex;
 bit write;
function new(write)
  this.write = write;
 end

class parent;
 bit read;
 
 virtual function x ();
   read= 1'b1;
endfunction
endclass
class child extend parent;
   function x ();
	read = 1'b1;
 endfunction
endclass
module tb;
 parent par=new();
 child  ch =new();

initial begin
   par = ch;
   ch.x.read =1'bx;
   par.read ;   
end
endmodule



class ex;
 rand int a ;

 constraint exa {a inside [10:20];}
endclass

